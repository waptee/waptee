/* Waptee 2014 - 2014
 * This file is part of Waptee project. All Rights Reserved.
 * 
 * All information contained herein is, and remains
 * the property of {company name} and its suppliers, if any.
 * The intellectual and technical concepts contained herein 
 * are proprietary to {company name} and its suppliers.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 *
 * This file is subject to the terms and conditions defined in
 * file LICENSE, which is part of this source code package.
 */
package com.waptee.entity;

import java.util.UUID;

import com.google.gson.Gson;
import com.googlecode.objectify.annotation.Id;
import com.googlecode.objectify.annotation.Ignore;

/**
 * TODO insert here the comments.
 *
 * @author {email}
 */
public abstract class Entity {


  /**
   * Unique element identifier.
   */
  @Id
  private String id;
  
  /**
   * Serialization the element.
   * 
   * TODO IoD
   */
  @Ignore
  private static Gson gson = new Gson();
  
  /**
   * Set id autogenerated with UUID strategy. 
   * A UUID is 128 bits long, and can guarantee 
   * uniqueness across space and time.
   * 
   * @see http://www.ietf.org/rfc/rfc4122.txt
   */
  @SuppressWarnings("unchecked")
  public <E extends Entity> E generateId() {
    
    // generate random UUID
    this.setId(UUID.randomUUID().toString());
    
    return (E) this;
    
  }

  /**
   * TODO insert here the comments.
   *
   * @return
   */
  public String getId() {
    return id;
  }

  /**
   * TODO insert here the comments.
   *
   * @param id
   */
  @SuppressWarnings("unchecked")
  public <E extends Element> E setId(String id) {
    this.id = id;
    return (E) this;
  }
  
  /**
   * TODO insert here the comments.
   */
  public String toString() {
    return gson.toJson(this);
  }
  
}
